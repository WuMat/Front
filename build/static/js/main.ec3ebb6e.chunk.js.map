{"version":3,"sources":["components/Film/Film.js","components/Input/Input.js","components/AddFilm/AddFilm.js","App.js","serviceWorker.js","index.js"],"names":["Film","react_default","a","createElement","className","this","props","titlePl","title","size","diskName","React","Component","memo","Input","Object","assign","elementConfig","value","onChange","changed","AddFilm","state","filmInput","elementType","type","placeholder","inputChangedHandler","event","id","target","newFilm","objectSpread","_this","updateElement","setState","sendFilmHandler","preventDefault","console","log","formData","nameData","axios","post","then","response","close","catch","error","_this2","formArray","key","push","config","form","onSubmit","map","oneInput","components_Input_Input","style","transform","showAddFilm","opacity","onClick","children","App","loadedFilms","addFilmHandler","sideDrawerHandler","get","data","films","film","components_Film_Film","_id","Fragment","components_AddFilm_AddFilm","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6UAGMA,0LAEF,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,SAAIE,KAAKC,MAAMC,SACfN,EAAAC,EAAAC,cAAA,SAAIE,KAAKC,MAAME,OACfP,EAAAC,EAAAC,cAAA,SAAIE,KAAKC,MAAMG,MACfR,EAAAC,EAAAC,cAAA,SAAIE,KAAKC,MAAMI,kBAPJC,IAAMC,YAaVD,MAAME,KAAKb,UCbpBc,0LAEF,OACEb,EAAAC,EAAAC,cAAA,QAAAY,OAAAC,OAAA,CACAZ,UAAU,SACNC,KAAKC,MAAMW,cAFf,CAGAC,MAAOb,KAAKC,MAAMY,MAClBC,SAAUd,KAAKC,MAAMc,kBAPPT,IAAMC,YAYXD,MAAME,KAAKC,GCTpBO,oNACJC,MAAQ,CACNC,UAAU,CACRhB,QAAS,CACPiB,YAAa,QACbP,cAAc,CACZQ,KAAM,OACNC,YAAa,YAEfR,MAAO,IAETV,MAAO,CACLgB,YAAa,QACbP,cAAc,CACZQ,KAAM,OACNC,YAAa,mBAEfR,MAAO,IAETT,KAAM,CACJe,YAAa,QACbP,cAAc,CACZQ,KAAM,OACNC,YAAa,iBAEfR,MAAO,IAETR,SAAU,CACRc,YAAa,QACbP,cAAc,CACZQ,KAAM,OACNC,YAAa,qBAEfR,MAAO,QAKbS,oBAAsB,SAACC,EAAOC,GAC7B,IAAMX,EAAQU,EAAME,OAAOZ,MAErBa,EAAOhB,OAAAiB,EAAA,EAAAjB,CAAA,GACRkB,EAAKX,MAAMC,WAGVW,EAAcnB,OAAAiB,EAAA,EAAAjB,CAAA,GACfgB,EAAQF,IAEbK,EAAchB,MAAQA,EACtBa,EAAQF,GAAMK,EAEdD,EAAKE,SAAS,CACZZ,UAAWQ,OAKdK,gBAAkB,SAACR,GACjBA,EAAMS,iBACNC,QAAQC,IAAI,UACZ,IAAMC,EAAU,GAEhB,IAAI,IAAIC,KAAYR,EAAKX,MAAMC,UAC7BiB,EAASC,GAAYR,EAAKX,MAAMC,UAAUkB,GAAUvB,MAEtDoB,QAAQC,IAAIC,GAGZE,IAAMC,KAAK,sDAAuDH,GACjEI,KAAK,SAAAC,GACJP,QAAQC,IAAIM,GACZZ,EAAK3B,MAAMwC,UAEZC,MAAM,SAAAC,GACLV,QAAQC,IAAIS,8EAMR,IAAAC,EAAA5C,KACA6C,EAAY,GAClB,IAAK,IAAIC,KAAO9C,KAAKiB,MAAMC,UACzB2B,EAAUE,KAAK,CACbvB,GAAIsB,EACJE,OAAQhD,KAAKiB,MAAMC,UAAU4B,KAIjC,IAAIG,EACFrD,EAAAC,EAAAC,cAAA,QAAMoD,SAAUlD,KAAK+B,iBAClBc,EAAUM,IAAI,SAAAC,GAAQ,OACrBxD,EAAAC,EAAAC,cAACuD,EAAD,CACEP,IAAKM,EAAS5B,GACdZ,cAAewC,EAASJ,OAAOpC,cAC/BC,MAAOuC,EAASJ,OAAOnC,MACvBE,QAAS,SAACQ,GAAD,OAAUqB,EAAKtB,oBAAoBC,EAAO6B,EAAS5B,SAIhE5B,EAAAC,EAAAC,cAAA,UAAQC,UAAU,UAAlB,YAMJ,OACEH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbuD,MAAO,CAACC,UAAWvD,KAAKC,MAAMuD,YAAc,gBAAiB,qBAC7DC,QAASzD,KAAKC,MAAMuD,YAAc,IAAK,MACtCP,EACDrD,EAAAC,EAAAC,cAAA,UAAQC,UAAU,UAAU2D,QAAS,kBAAKd,EAAK3C,MAAMwC,UAArD,WACCzC,KAAKC,MAAM0D,iBAhHErD,IAAMC,YAsHbD,MAAME,KAAKQ,GC3DX4C,oNAxDb3C,MAAQ,CACNuC,aAAa,EACbK,YAAa,MAYfC,eAAiB,WACflC,EAAKE,SAAS,CACZ0B,aAAc5B,EAAKX,MAAMuC,iBAG7BO,kBAAoB,WAClB9B,QAAQC,IAAI,8FAfK,IAAAU,EAAA5C,KACjBqC,IAAM2B,IAAI,uDACTzB,KAAK,SAAAC,GACJI,EAAKd,SAAS,CACZ+B,YAAarB,EAASyB,KAAKC,2CAc/BjC,QAAQC,IAAIlC,KAAKiB,MAAM4C,aACvB,IAAIK,EAcJ,OAZAA,EAAQlE,KAAKiB,MAAM4C,YAAYV,IAAI,SAAAgB,GACjC,OACEvE,EAAAC,EAAAC,cAACsE,EAAD,CACAtB,IAAKqB,EAAKE,IACVnE,QAASiE,EAAKjE,QACdC,MAAOgE,EAAKhE,MACZC,KAAM+D,EAAK/D,KACXC,SAAU8D,EAAK9D,aAMjBT,EAAAC,EAAAC,cAAAF,EAAAC,EAAAyE,SAAA,KACA1E,EAAAC,EAAAC,cAACyE,EAAD,CAASf,YAAaxD,KAAKiB,MAAMuC,YAAaf,MAAOzC,KAAK8D,iBAG1DlE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQ4D,QAAS1D,KAAK+D,kBAAmBhE,UAAU,QAAnD,UACAH,EAAAC,EAAAC,cAAA,UAAQ4D,QAAS1D,KAAK8D,eAAgB/D,UAAU,SAAhD,SAFF,mBAKCmE,UAjDW3D,cCIEiE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlF,EAAAC,EAAAC,cAACiF,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7C,KAAK,SAAA8C,GACjCA,EAAaC","file":"static/js/main.ec3ebb6e.chunk.js","sourcesContent":["import React from 'react'\r\nimport './Film.css'\r\n\r\nclass Film extends React.Component{\r\n  render(){\r\n    return(\r\n      <div className='film'>\r\n        <p>{this.props.titlePl}</p>\r\n        <p>{this.props.title}</p>\r\n        <p>{this.props.size}</p>\r\n        <p>{this.props.diskName}</p>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default React.memo(Film)","import React from 'react'\r\nimport './Input.css'\r\n\r\nclass Input extends React.Component{\r\n  render(){\r\n    return(\r\n      <input\r\n      className='input'\r\n      {...this.props.elementConfig}\r\n      value={this.props.value}\r\n      onChange={this.props.changed}/>\r\n    )\r\n  }\r\n}\r\n\r\nexport default React.memo(Input)","import React from 'react';\r\nimport Input from '../Input/Input';\r\nimport axios from 'axios'\r\n\r\nimport './AddFilm.css';\r\n\r\nclass AddFilm extends React.Component{\r\n  state = {\r\n    filmInput:{\r\n      titlePl: {\r\n        elementType: 'input',\r\n        elementConfig:{\r\n          type: 'text',\r\n          placeholder: 'Tytul Pl'\r\n        },\r\n        value: ''\r\n      },\r\n      title: {\r\n        elementType: 'input',\r\n        elementConfig:{\r\n          type: 'text',\r\n          placeholder: 'Tytul orginalny'\r\n        },\r\n        value: ''\r\n      },\r\n      size: {\r\n        elementType: 'input',\r\n        elementConfig:{\r\n          type: 'text',\r\n          placeholder: 'rozmiar pliku'\r\n        },\r\n        value: ''\r\n      },\r\n      diskName: {\r\n        elementType: 'input',\r\n        elementConfig:{\r\n          type: 'text',\r\n          placeholder: 'na czym jest film'\r\n        },\r\n        value: ''\r\n      },\r\n    }\r\n  }\r\n\r\n  inputChangedHandler = (event, id) => {\r\n   const value = event.target.value;\r\n\r\n   const newFilm = {\r\n     ...this.state.filmInput\r\n   }\r\n\r\n   const updateElement={\r\n     ...newFilm[id]\r\n   }\r\n   updateElement.value = value\r\n   newFilm[id] = updateElement\r\n\r\n   this.setState({\r\n     filmInput: newFilm\r\n   })\r\n  }\r\n\r\n\r\n  sendFilmHandler = (event) =>{\r\n    event.preventDefault();\r\n    console.log('poszlo')\r\n    const formData ={};\r\n\r\n    for(let nameData in this.state.filmInput){\r\n      formData[nameData] = this.state.filmInput[nameData].value\r\n    }\r\n    console.log(formData)\r\n    \r\n\r\n    axios.post('https://whispering-shore-72195.herokuapp.com/films/', formData)\r\n    .then(response=>{\r\n      console.log(response);\r\n      this.props.close()\r\n    })\r\n    .catch(error=>{\r\n      console.log(error)\r\n    })\r\n    \r\n  }\r\n\r\n\r\n  render(){\r\n    const formArray = []\r\n    for( let key in this.state.filmInput){\r\n      formArray.push({\r\n        id: key,\r\n        config: this.state.filmInput[key]\r\n      })\r\n    }\r\n\r\n    let form = (\r\n      <form onSubmit={this.sendFilmHandler}>\r\n        {formArray.map(oneInput => (\r\n          <Input \r\n            key={oneInput.id}\r\n            elementConfig={oneInput.config.elementConfig}\r\n            value={oneInput.config.value}\r\n            changed={(event)=> this.inputChangedHandler(event, oneInput.id)}\r\n\r\n          />\r\n        ))}\r\n        <button className='poszlo'> wyslij</button>\r\n      </form>\r\n    )\r\n    \r\n\r\n   \r\n    return(\r\n      <div className='addFilm'\r\n        style={{transform: this.props.showAddFilm ? 'translateY(0)': 'translateY(-100vh)', \r\n        opacity: this.props.showAddFilm ? '1': '0'}}>\r\n        {form}\r\n        <button className='zamknij' onClick={()=> this.props.close()}>zamknij</button>\r\n        {this.props.children}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default React.memo(AddFilm)","import React, { Component } from 'react';\nimport axios from 'axios';\n\nimport Film from './components/Film/Film';\nimport AddFilm from './components/AddFilm/AddFilm'\n\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    showAddFilm: false,\n    loadedFilms: []\n  }\n\n  componentDidMount(){\n    axios.get('https://whispering-shore-72195.herokuapp.com/films/')\n    .then(response => {\n      this.setState({\n        loadedFilms: response.data.films\n      })\n    })\n  }\n\n  addFilmHandler = () =>{\n    this.setState({\n      showAddFilm: !this.state.showAddFilm\n    })\n  }\n  sideDrawerHandler = () => {\n    console.log('szukaj');\n  }\n  render() {\n    console.log(this.state.loadedFilms)\n    let films = null;\n\n    films = this.state.loadedFilms.map(film => {\n      return(\n        <Film\n        key={film._id}\n        titlePl={film.titlePl}\n        title={film.title}\n        size={film.size}\n        diskName={film.diskName}\n        />\n      )\n    })\n    \n    return (\n      <>\n      <AddFilm showAddFilm={this.state.showAddFilm} close={this.addFilmHandler}>\n\n      </AddFilm>\n      <div className=\"App\">\n        <button onClick={this.sideDrawerHandler} className='left'>szukaj</button>\n        <button onClick={this.addFilmHandler} className='right'>Dodaj</button>\n        BAZA FILMOW !!!\n      </div>\n      {films}\n      </>\n\n\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}